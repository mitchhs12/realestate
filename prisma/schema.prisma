generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  currency      String?
  language      String?
  email         String?         @unique
  phoneNumber   String?         
  emailVerified DateTime?       @map("email_verified")
  image         String?
  role          String?
  favoritedLists  FavoriteList[]
  accounts      Account[]
  sessions      Session[]
  homes         Home[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Home {
  id              Int             @id @default(autoincrement())
  owner           User            @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title           String?
  description     String?
  address         String?
  municipality    String?
  subRegion       String?
  region          String?
  country         String?
  latitude        Float           @default(0)
  longitude       Float           @default(0)
  type            String[]
  features        String[]
  bedrooms        Int             @default(0)
  bathrooms       Int             @default(0)
  livingrooms     Int             @default(0)
  kitchens        Int             @default(0)
  capacity        Int             @default(0)
  photos          String[]
  price           Float           @default(0.0)
  currency        String?
  language        String?
  priceUsd        Float           @default(0.0)
  priceNegotiable Boolean         @default(false)
  areaSqm         Float           @default(0.0)
  listingType     String?
  contactName     String?
  contactEmail    String?
  contactPhone    String?
  isActive        Boolean         @default(false)
  isComplete      Boolean         @default(false)
  completedAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  listingFlowStep Int
  favoritedLists  FavoriteList[]  @relation("HomesInFavoriteLists")
  ownerId         String

  @@index([ownerId])
  @@map("homes")
}

model FavoriteList {
  id        Int @id @default(autoincrement())
  name      String
  userId    String
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homes     Home[]                @relation("HomesInFavoriteLists")
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  @@map("favorite_lists")
}

model Currencies {
  symbol    String  @id
  usdPrice  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("currencies")
}

