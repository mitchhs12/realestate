generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  favorites     UserFavorites[]
  role          String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Home {
  id          Int             @id @default(autoincrement())
  ownerId     Int
  title       String
  description String
  address     String?
  district    String?
  city        String?
  state       String?
  country     String
  latitude    Float?
  longitude   Float?
  type        String[]
  features    String[]
  bedrooms    Int
  bathrooms   Int
  capacity    Int
  photos      String[]
  price       Float
  areaSqm     Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  favoritedBy UserFavorites[]

  @@index([ownerId])
  @@map("homes")
}

model UserFavorites {
  userId String
  homeId Int
  user   User @relation(fields: [userId], references: [id])
  home   Home @relation(fields: [homeId], references: [id])

  @@id([userId, homeId])
  @@map("userFavorites")
}
